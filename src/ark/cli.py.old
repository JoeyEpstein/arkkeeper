import click
import json
from pathlib import Path
from rich.console import Console
from rich.table import Table

console = Console()

@click.group()
@click.version_option(version="0.2.0")
def cli():
    """Arkkeeper - Find, score, and rotate credentials locally."""
    pass

@cli.command()
def init():
    """Initialize Arkkeeper configuration."""
    console.print("[green]‚ú® Initializing Arkkeeper...[/green]")
    config_dir = Path.home() / ".config" / "arkkeeper"
    config_dir.mkdir(parents=True, exist_ok=True)
    console.print(f"[blue]Created config at {config_dir}/config.yml[/blue]")

@cli.command()
@click.option('--out', type=click.Path(), default='./arkkeeper_outputs')
def scan(out):
    """Scan for credentials and security issues."""
    console.print("[yellow]üîç Scanning for credentials...[/yellow]")
    
    # Import here to avoid circular imports
    from ark.enumerate.ssh import scan_ssh
    
    # Create output directory
    output_dir = Path(out)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Run SSH scanner
    console.print("  Scanning SSH keys...")
    ssh_findings = scan_ssh()
    
    # Save findings
    findings_file = output_dir / "findings.json"
    with open(findings_file, 'w') as f:
        json.dump({"ssh": ssh_findings}, f, indent=2, default=str)
    
    # Display summary
    if ssh_findings:
        table = Table(title="SSH Security Findings")
        table.add_column("Path", style="cyan")
        table.add_column("Issues", style="red")
        
        for finding in ssh_findings:
            path = finding['path'].replace(str(Path.home()), "~")
            issues = len(finding.get('findings', []))
            table.add_row(path, str(issues))
        
        console.print(table)
    else:
        console.print("[green]  ‚úì No SSH issues found[/green]")
    
    console.print(f"\n[green]‚úÖ Scan complete! Results saved to {findings_file}[/green]")

def main():
    cli()

if __name__ == '__main__':
    main()

@cli.command()
@click.option('--rules', default='rules/default.yml', show_default=True)
@click.option('--out', default='./arkkeeper_outputs', show_default=True)
def selftest(rules, out):
    """Run a quick smoke test: load rules, create outputs dir, write a dummy report."""
    from pathlib import Path
    import yaml, json, time

    console.print("[cyan]üîß Arkkeeper self-test starting...[/cyan]")

    # 1) Rules file readable + valid YAML
    rules_path = Path(rules).expanduser()
    if not rules_path.exists():
        console.print(f"[red]‚ùå Rules file not found:[/red] {rules_path}")
        raise SystemExit(1)
    data = yaml.safe_load(rules_path.read_text())
    if not isinstance(data, dict) or 'rules' not in data:
        console.print("[red]‚ùå rules/default.yml missing top-level 'rules' key[/red]")
        raise SystemExit(1)
    console.print(f"[green]‚úÖ Loaded rules:[/green] {len(data.get('rules', {}))} entries")

    # 2) Outputs directory write check
    outdir = Path(out)
    outdir.mkdir(parents=True, exist_ok=True)
    probe = outdir / "selftest.json"
    probe.write_text(json.dumps({
        "ts": time.time(),
        "ok": True,
        "rules_count": len(data.get('rules', {})),
        "note": "Arkkeeper selftest artifact"
    }, indent=2))
    console.print(f"[green]‚úÖ Wrote artifact:[/green] {probe}")

    console.print("[bold green]üéâ Self-test passed.[/bold green]")

